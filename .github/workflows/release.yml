name: Release

on:
  release:
    types: [published]
env:
  OAUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OWNER: radixdlt
  EXTENSION_REPO: babylon-poc
  PTE_BINARIES_REPO: resim-server

jobs:
  upload-babylon-browser-extension-artifact:
    name: Upload babylon browser extension artifact
    runs-on: ubuntu-latest
    steps:
      - name: Download browser extension artifact
        run: |
          API_URL="https://${{ env.OAUTH_TOKEN }}:@api.github.com/repos/${{ env.OWNER }}/${{ env.EXTENSION_REPO }}"
          
          #debugging
          curl $API_URL/releases/latest | jq -r

          # Gets info on latest release, gets first uploaded asset id of a release,
          # More info on jq being used to parse json: https://stedolan.github.io/jq/tutorial/
          ASSET_ID=$(curl $API_URL/releases/latest | jq -r '.assets[0].id')

          # curl:
          # -O: Use name provided from endpoint
          # -J: "Content Disposition" header, in this case "attachment"
          # -L: Follow links, we actually get forwarded in this request
          # -H "Accept: application/octet-stream": Tells api we want to dl the full binary
          curl -O -J -L -H "Accept: application/octet-stream" "$API_URL/releases/assets/$ASSET_ID"

      # Uses tag that triggered the workflow as name for the release
      # https://github.com/ncipollo/release-action
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "extension.zip"
          allowUpdates: true

  upload-pte-terminal-binaries:
    name: Upload PTE terminal binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download browser extension artifact
        run: |
          API_URL="https://${{ env.OAUTH_TOKEN }}:@api.github.com/repos/${{ env.OWNER }}/${{ env.PTE_BINARIES_REPO }}"

          #debugging
          curl $API_URL/releases/latest | jq -r
          
          # Gets info on latest release, gets first uploaded asset id of a release,
          # More info on jq being used to parse json: https://stedolan.github.io/jq/tutorial/
          ASSET_ID=$(curl $API_URL/releases/latest | jq -r '.assets[0].id')

          # curl:
          # -O: Use name provided from endpoint
          # -J: "Content Disposition" header, in this case "attachment"
          # -L: Follow links, we actually get forwarded in this request
          # -H "Accept: application/octet-stream": Tells api we want to dl the full binary
          curl -O -J -L -H "Accept: application/octet-stream" "$API_URL/releases/assets/$ASSET_ID"

      # Uses tag that triggered the workflow as name for the release
      # https://github.com/ncipollo/release-action
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "resim-client.*"
          allowUpdates: true

  publish-pte-sdk:
    name: Publish pte-sdk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - run: |
          cd pte-sdk
          npm install
          npm run build
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

  publish-browser-extension-sdk:
    name: Publish browser-extension-sdk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - run: |
          cd pte-browser-extension-sdk
          npm install
          npm run build
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

  publish-pte-manifest-compiler:
    name: Publish pte-manifest-compiler
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: 'v0.10.2'
      - run: |
          cd pte-manifest-compiler
          wasm-pack build --target web
          wasm-pack publish --target web
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
